model Roleplay {
  id            String  @id @default(cuid())
  emoji         String
  title         String
  assistantRole String
  userRole      String
  description   String
  isPublic      Boolean

  difficulty Int /// 1-3 (1 being the easiest, 3 being the hardest)

  categoryId String
  category   RoleplayCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  profileId String?
  profile   Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)

  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessions RoleplaySession[]

  @@map("roleplay")
}

model RoleplaySession {
  id                   String @id @default(cuid())
  duration             Int    @default(0)
  userSpeakingDuration Int    @default(0)
  aiSpeakingDuration   Int    @default(0)

  tokensInputText        Int @default(0)
  tokensInputTextCached  Int @default(0)
  tokensInputAudio       Int @default(0)
  tokensInputAudioCached Int @default(0)
  tokensOutputText       Int @default(0)
  tokensOutputAudio      Int @default(0)

  feedback Json?

  roleplayId String
  roleplay   Roleplay @relation(fields: [roleplayId], references: [id], onDelete: Cascade)

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages RoleplaySessionMessage[]

  @@index([profileId])
  @@index([organizationId])
  @@map("roleplay_session")
}

model RoleplaySessionMessage {
  id      String                     @id @default(cuid())
  role    RoleplaySessionMessageRole
  content String

  feedback Json?

  sessionId String
  session   RoleplaySession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sessionId])
  @@map("roleplay_session_message")
}

enum RoleplaySessionMessageRole {
  ASSISTANT
  USER
  SYSTEM

  @@map("roleplay_session_message_role")
}

model RoleplayCategory {
  id       String  @id @default(cuid())
  emoji    String
  name     String
  isPublic Boolean

  subCategories    RoleplayCategory[] @relation("SubToParent")
  parentCategory   RoleplayCategory?  @relation("SubToParent", fields: [parentCategoryId], references: [id], onDelete: Cascade)
  parentCategoryId String?

  profileId String?
  profile   Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)

  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  roleplays Roleplay[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("roleplay_category")
}
