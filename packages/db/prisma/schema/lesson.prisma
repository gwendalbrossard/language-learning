model Lesson {
  id          String  @id @default(cuid())
  emoji       String
  title       String
  description String
  isPublic    Boolean

  difficulty Int /// 1-3 (1 being the easiest, 3 being the hardest)

  categoryId String
  category   LessonCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  profileId String?
  profile   Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)

  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  sessions LessonSession[]

  @@map("lesson")
}

model LessonSession {
  id                   String @id @default(cuid())
  duration             Int    @default(0)
  userSpeakingDuration Int    @default(0)
  aiSpeakingDuration   Int    @default(0)

  tokensInputText        Int @default(0)
  tokensInputTextCached  Int @default(0)
  tokensInputAudio       Int @default(0)
  tokensInputAudioCached Int @default(0)
  tokensOutputText       Int @default(0)
  tokensOutputAudio      Int @default(0)

  lessonId String
  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  messages   LessonSessionMessage[]
  vocabulary LessonSessionVocabulary[]

  @@index([profileId])
  @@index([organizationId])
  @@map("lesson_session")
}

model LessonSessionMessage {
  id      String                   @id @default(cuid())
  role    LessonSessionMessageRole
  content String

  feedback Json?

  sessionId String
  session   LessonSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sessionId])
  @@map("lesson_session_message")
}

enum LessonSessionMessageRole {
  ASSISTANT
  USER
  SYSTEM

  @@map("lesson_session_message_role")
}

model LessonCategory {
  id       String  @id @default(cuid())
  emoji    String
  name     String
  isPublic Boolean

  subCategories    LessonCategory[] @relation("SubToParent")
  parentCategory   LessonCategory?  @relation("SubToParent", fields: [parentCategoryId], references: [id], onDelete: Cascade)
  parentCategoryId String?

  profileId String?
  profile   Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)

  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  lessons Lesson[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("lesson_category")
}

model LessonSessionVocabulary {
  id          String                      @id @default(cuid())
  type        LessonSessionVocabularyType
  text        String
  translation String
  information String?

  sessionId String
  session   LessonSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([sessionId])
  @@map("lesson_session_vocabulary")
}

enum LessonSessionVocabularyType {
  WORD
  PHRASE
  EXPRESSION
}
